#!/bin/bash

#######################################################################
# Author: Balázs Gábor http://github.com/bado/gdiff
#
# This script copies the modified files between two git commits to a
# specified directory.
#
# For usage, see usage().
#
#
# Changelog:
#	Version: 1.0 (2011. 08. 08.)
#		- initial version
#
#	Version: 1.1 (2012. 03. 22.)
#		- changed from cp to rsync to be portable
#
#######################################################################


usage() {
	cat <<END
USAGE:
	$0 [-f] -o output_dir [COMMIT_FROM] [COMMIT_TO]
	$0 -h


PARAMETERS:
	-f	If this option is not set, the script fails when
		the output directory exists. To override this
		behaviour, use this option.

	-o	Sets the output directory where the files will
		be copied.

	-h	Prints this message.

	COMMIT_FROM defaults to HEAD~1, and COMMIT_TO to HEAD.


DISCLAIMER:
	The script always copies the version of the file that
	exists in the working directory!


EXAMPLE:

	Export the files modified in the last commit:
	$0 -o /tmp
	-- or --
	$0 -o /tmp HEAD~1
	-- or --
	$0 -o /tmp HEAD~1 HEAD

END
}

force=0
prefix=

while getopts "hfo:" f
do
	case $f in
		f)
			force=1
			;;
		o)
			prefix=$OPTARG
			;;
		h)
			usage
			exit 0
			;;
		\?)
			echo "Invalid option : -$OPTARG" >&2
			exit 3
			;;
		\:)
			echo "Option -$OPTARG requires an argument." >&2
			exit 1
			;;
	esac
done

shift $(($OPTIND - 1))

if [ -z "$prefix" ]; then
	echo "Output directory is not set!" >&2
	exit 1
fi

if [ -z "$1" ]; then
	COMMIT_FROM="HEAD~1"
else
	COMMIT_FROM=$1
fi

if [ -z "$2" ]; then
	COMMIT_TO="HEAD"
else
	COMMIT_TO=$2
fi

if [ -d $prefix ]; then
	if [ $force -eq 1 ]; then
		echo "Directory $prefix exists, but force flag is set."
	else
		echo "Directory $prefix exists!" >&2
		exit 2
	fi
else
	mkdir -p $prefix
fi

git diff --name-only --diff-filter=AM $COMMIT_FROM $COMMIT_TO | xargs -I {} rsync -R {} $prefix
git diff --name-only --diff-filter=D $COMMIT_FROM $COMMIT_TO > $prefix/TO_DELETE.lst
git rev-parse $COMMIT_TO > $prefix/REVISION
